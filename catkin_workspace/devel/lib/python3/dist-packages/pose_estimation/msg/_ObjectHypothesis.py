# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pose_estimation/ObjectHypothesis.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ObjectHypothesis(genpy.Message):
  _md5sum = "ad948bb5ba9d5ef7bf2036ba8adf8f1d"
  _type = "pose_estimation/ObjectHypothesis"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string label
geometry_msgs/Pose pose
geometry_msgs/Pose pca
geometry_msgs/Point latent
geometry_msgs/Point mean
float32[] rangeX
float32[] rangeY
float32[] rangeZ
float32 score

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['label','pose','pca','latent','mean','rangeX','rangeY','rangeZ','score']
  _slot_types = ['string','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Point','geometry_msgs/Point','float32[]','float32[]','float32[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       label,pose,pca,latent,mean,rangeX,rangeY,rangeZ,score

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectHypothesis, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.label is None:
        self.label = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pca is None:
        self.pca = geometry_msgs.msg.Pose()
      if self.latent is None:
        self.latent = geometry_msgs.msg.Point()
      if self.mean is None:
        self.mean = geometry_msgs.msg.Point()
      if self.rangeX is None:
        self.rangeX = []
      if self.rangeY is None:
        self.rangeY = []
      if self.rangeZ is None:
        self.rangeZ = []
      if self.score is None:
        self.score = 0.
    else:
      self.label = ''
      self.pose = geometry_msgs.msg.Pose()
      self.pca = geometry_msgs.msg.Pose()
      self.latent = geometry_msgs.msg.Point()
      self.mean = geometry_msgs.msg.Point()
      self.rangeX = []
      self.rangeY = []
      self.rangeZ = []
      self.score = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_20d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pca.position.x, _x.pca.position.y, _x.pca.position.z, _x.pca.orientation.x, _x.pca.orientation.y, _x.pca.orientation.z, _x.pca.orientation.w, _x.latent.x, _x.latent.y, _x.latent.z, _x.mean.x, _x.mean.y, _x.mean.z))
      length = len(self.rangeX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.rangeX))
      length = len(self.rangeY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.rangeY))
      length = len(self.rangeZ)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.rangeZ))
      buff.write(_get_struct_f().pack(self.score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pca is None:
        self.pca = geometry_msgs.msg.Pose()
      if self.latent is None:
        self.latent = geometry_msgs.msg.Point()
      if self.mean is None:
        self.mean = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pca.position.x, _x.pca.position.y, _x.pca.position.z, _x.pca.orientation.x, _x.pca.orientation.y, _x.pca.orientation.z, _x.pca.orientation.w, _x.latent.x, _x.latent.y, _x.latent.z, _x.mean.x, _x.mean.y, _x.mean.z,) = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rangeX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rangeY = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rangeZ = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_20d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pca.position.x, _x.pca.position.y, _x.pca.position.z, _x.pca.orientation.x, _x.pca.orientation.y, _x.pca.orientation.z, _x.pca.orientation.w, _x.latent.x, _x.latent.y, _x.latent.z, _x.mean.x, _x.mean.y, _x.mean.z))
      length = len(self.rangeX)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rangeX.tostring())
      length = len(self.rangeY)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rangeY.tostring())
      length = len(self.rangeZ)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rangeZ.tostring())
      buff.write(_get_struct_f().pack(self.score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.pca is None:
        self.pca = geometry_msgs.msg.Pose()
      if self.latent is None:
        self.latent = geometry_msgs.msg.Point()
      if self.mean is None:
        self.mean = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.pca.position.x, _x.pca.position.y, _x.pca.position.z, _x.pca.orientation.x, _x.pca.orientation.y, _x.pca.orientation.z, _x.pca.orientation.w, _x.latent.x, _x.latent.y, _x.latent.z, _x.mean.x, _x.mean.y, _x.mean.z,) = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rangeX = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rangeY = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rangeZ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_20d = None
def _get_struct_20d():
    global _struct_20d
    if _struct_20d is None:
        _struct_20d = struct.Struct("<20d")
    return _struct_20d
