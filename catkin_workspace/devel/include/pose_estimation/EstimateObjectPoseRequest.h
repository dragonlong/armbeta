// Generated by gencpp from file pose_estimation/EstimateObjectPoseRequest.msg
// DO NOT EDIT!


#ifndef POSE_ESTIMATION_MESSAGE_ESTIMATEOBJECTPOSEREQUEST_H
#define POSE_ESTIMATION_MESSAGE_ESTIMATEOBJECTPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pose_estimation
{
template <class ContainerAllocator>
struct EstimateObjectPoseRequest_
{
  typedef EstimateObjectPoseRequest_<ContainerAllocator> Type;

  EstimateObjectPoseRequest_()
    : SceneFiles()
    , CalibrationFiles()
    , DoCalibration(false)  {
    }
  EstimateObjectPoseRequest_(const ContainerAllocator& _alloc)
    : SceneFiles(_alloc)
    , CalibrationFiles(_alloc)
    , DoCalibration(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _SceneFiles_type;
  _SceneFiles_type SceneFiles;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _CalibrationFiles_type;
  _CalibrationFiles_type CalibrationFiles;

   typedef uint8_t _DoCalibration_type;
  _DoCalibration_type DoCalibration;





  typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EstimateObjectPoseRequest_

typedef ::pose_estimation::EstimateObjectPoseRequest_<std::allocator<void> > EstimateObjectPoseRequest;

typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseRequest > EstimateObjectPoseRequestPtr;
typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseRequest const> EstimateObjectPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pose_estimation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'pose_estimation': ['/home/dragonx/catkin_workspace/src/pose_estimation/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fb1de211c0722ebd1a98129d9ca0b38";
  }

  static const char* value(const ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fb1de211c0722ebULL;
  static const uint64_t static_value2 = 0xd1a98129d9ca0b38ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_estimation/EstimateObjectPoseRequest";
  }

  static const char* value(const ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string SceneFiles\n\
string CalibrationFiles\n\
bool DoCalibration\n\
\n\
\n\
";
  }

  static const char* value(const ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SceneFiles);
      stream.next(m.CalibrationFiles);
      stream.next(m.DoCalibration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EstimateObjectPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_estimation::EstimateObjectPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "SceneFiles: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.SceneFiles);
    s << indent << "CalibrationFiles: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.CalibrationFiles);
    s << indent << "DoCalibration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DoCalibration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_ESTIMATION_MESSAGE_ESTIMATEOBJECTPOSEREQUEST_H
