// Generated by gencpp from file pose_estimation/EstimateObjectPoseResponse.msg
// DO NOT EDIT!


#ifndef POSE_ESTIMATION_MESSAGE_ESTIMATEOBJECTPOSERESPONSE_H
#define POSE_ESTIMATION_MESSAGE_ESTIMATEOBJECTPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pose_estimation/ObjectHypothesis.h>

namespace pose_estimation
{
template <class ContainerAllocator>
struct EstimateObjectPoseResponse_
{
  typedef EstimateObjectPoseResponse_<ContainerAllocator> Type;

  EstimateObjectPoseResponse_()
    : Objects()  {
    }
  EstimateObjectPoseResponse_(const ContainerAllocator& _alloc)
    : Objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >::other >  _Objects_type;
  _Objects_type Objects;





  typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EstimateObjectPoseResponse_

typedef ::pose_estimation::EstimateObjectPoseResponse_<std::allocator<void> > EstimateObjectPoseResponse;

typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseResponse > EstimateObjectPoseResponsePtr;
typedef boost::shared_ptr< ::pose_estimation::EstimateObjectPoseResponse const> EstimateObjectPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pose_estimation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'pose_estimation': ['/home/dragonx/catkin_workspace/src/pose_estimation/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc26f6b51927bc4d2d969c808c6e59b1";
  }

  static const char* value(const ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc26f6b51927bc4dULL;
  static const uint64_t static_value2 = 0x2d969c808c6e59b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_estimation/EstimateObjectPoseResponse";
  }

  static const char* value(const ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
ObjectHypothesis[] Objects\n\
\n\
\n\
================================================================================\n\
MSG: pose_estimation/ObjectHypothesis\n\
string label\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Pose pca\n\
geometry_msgs/Point latent\n\
geometry_msgs/Point mean\n\
float32[] rangeX\n\
float32[] rangeY\n\
float32[] rangeZ\n\
float32 score\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EstimateObjectPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_estimation::EstimateObjectPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "Objects[]" << std::endl;
    for (size_t i = 0; i < v.Objects.size(); ++i)
    {
      s << indent << "  Objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >::stream(s, indent + "    ", v.Objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_ESTIMATION_MESSAGE_ESTIMATEOBJECTPOSERESPONSE_H
