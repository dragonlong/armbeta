// Generated by gencpp from file pose_estimation/ObjectHypothesis.msg
// DO NOT EDIT!


#ifndef POSE_ESTIMATION_MESSAGE_OBJECTHYPOTHESIS_H
#define POSE_ESTIMATION_MESSAGE_OBJECTHYPOTHESIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace pose_estimation
{
template <class ContainerAllocator>
struct ObjectHypothesis_
{
  typedef ObjectHypothesis_<ContainerAllocator> Type;

  ObjectHypothesis_()
    : label()
    , pose()
    , pca()
    , latent()
    , mean()
    , rangeX()
    , rangeY()
    , rangeZ()
    , score(0.0)  {
    }
  ObjectHypothesis_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , pose(_alloc)
    , pca(_alloc)
    , latent(_alloc)
    , mean(_alloc)
    , rangeX(_alloc)
    , rangeY(_alloc)
    , rangeZ(_alloc)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pca_type;
  _pca_type pca;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _latent_type;
  _latent_type latent;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _mean_type;
  _mean_type mean;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rangeX_type;
  _rangeX_type rangeX;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rangeY_type;
  _rangeY_type rangeY;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rangeZ_type;
  _rangeZ_type rangeZ;

   typedef float _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectHypothesis_

typedef ::pose_estimation::ObjectHypothesis_<std::allocator<void> > ObjectHypothesis;

typedef boost::shared_ptr< ::pose_estimation::ObjectHypothesis > ObjectHypothesisPtr;
typedef boost::shared_ptr< ::pose_estimation::ObjectHypothesis const> ObjectHypothesisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pose_estimation::ObjectHypothesis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pose_estimation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'pose_estimation': ['/home/dragonx/catkin_workspace/src/pose_estimation/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad948bb5ba9d5ef7bf2036ba8adf8f1d";
  }

  static const char* value(const ::pose_estimation::ObjectHypothesis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad948bb5ba9d5ef7ULL;
  static const uint64_t static_value2 = 0xbf2036ba8adf8f1dULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose_estimation/ObjectHypothesis";
  }

  static const char* value(const ::pose_estimation::ObjectHypothesis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Pose pca\n\
geometry_msgs/Point latent\n\
geometry_msgs/Point mean\n\
float32[] rangeX\n\
float32[] rangeY\n\
float32[] rangeZ\n\
float32 score\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::pose_estimation::ObjectHypothesis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.pose);
      stream.next(m.pca);
      stream.next(m.latent);
      stream.next(m.mean);
      stream.next(m.rangeX);
      stream.next(m.rangeY);
      stream.next(m.rangeZ);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectHypothesis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_estimation::ObjectHypothesis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pose_estimation::ObjectHypothesis_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "pca: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pca);
    s << indent << "latent: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.latent);
    s << indent << "mean: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.mean);
    s << indent << "rangeX[]" << std::endl;
    for (size_t i = 0; i < v.rangeX.size(); ++i)
    {
      s << indent << "  rangeX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rangeX[i]);
    }
    s << indent << "rangeY[]" << std::endl;
    for (size_t i = 0; i < v.rangeY.size(); ++i)
    {
      s << indent << "  rangeY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rangeY[i]);
    }
    s << indent << "rangeZ[]" << std::endl;
    for (size_t i = 0; i < v.rangeZ.size(); ++i)
    {
      s << indent << "  rangeZ[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rangeZ[i]);
    }
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSE_ESTIMATION_MESSAGE_OBJECTHYPOTHESIS_H
